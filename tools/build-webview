#!/bin/bash
set -eu
unset CDPATH

# tools/build-webview: WebView assets collection script.

# CAVEAT EMENDATOR: Neither of the build systems have any visibility into this
# script's dependencies -- it is run unconditionally, and must ensure on its own
# that it performs as few actions as possible when nothing has changed.

################################################################################
# Common functions
################################################################################

# print usage message; do not die
usage() {
    cat >&2 <<EOF
usage: $0 [ios | android] --destination DEST

Builds a platform-local intermediate directory containing files used by the
message-list WebView. The target platform (either \`ios\` or \`android\`) must
be specified, along with the expected destination directory.

(This script is usually run automatically by the build system.)
EOF
}

# print error and die
err() {
    echo -e "$0:" $'\e[31merror:\e[0m' "$@" >&2
    exit 1;
}

################################################################################
# Environment
################################################################################

# The project root, for absolutizing paths and accessing auxiliary scripts.
# (Assumed to be one directory up from the script's own location.)
root="$(cd "$(dirname "${BASH_SOURCE[0]}")"/../ && pwd)"

# Ensure that we have access to a functional, modern `readlink`.
. "$root"/tools/lib/ensure-coreutils.sh

# Normalize and absolutize $root.
#
# This must return a name for the project root directory which coincides with
# the one Gradle/Xcode will provide. This is unlikely to be a problem on Linux
# or macOS, but has caused issues on Windows; see GitHub issue #3777.)
root="$(readlink -m "$root")"
readonly root

################################################################################
# Parameters
################################################################################

# Parse arguments. Sloppy, but sufficient for now.
unset target
unset dest
sanity_checks=1
while (( $# )); do
    case "$1" in
        --help|-h|help)
            usage; exit 0;;
        android|ios)
            # no check for multiple nouns; oh well
            target="$1"; shift;;
        --destination)
            # note: this doesn't permit an equals sign after `--destination`
            shift; dest="$1"; shift;;
        --no-sanity-checks)
            # disables target-directory sanity checks, for testing's sake
            shift; sanity_checks=0;;
        *) usage; exit 2;;
    esac
done

# All arguments are required; complain if any were omitted.
if  [ -z "${target-}" ]; then
    usage; exit 2
elif [ -z "${dest-}" ]; then
    usage; exit 2
fi

# Make $dest absolute, if it isn't already.
dest=$(readlink -m "$dest")

# Argument parsing has concluded; argument variables are no longer mutable.
readonly target dest sanity_checks

if (( sanity_checks )); then
    case "$target" in
        ios)
            if [ "$(uname)" != "Darwin" ]; then
                err "iOS builds only supported on macOS";
            fi

            # $dest should be copied to `${bundle_root}/webview`.
            #
            # $dest itself must be specified twice in Xcode: once in the invocation
            # of this script, and once in the "Copy Bundle Resources" step. If you
            # change it, you'll need to change it in both places. (And here, of
            # course.)
            if [[ "$dest" != "$root/ios/"* ]]; then
                err "unexpected destination directory '$dest' (expected target in $root/ios/)"
            fi
        ;;
        android)
            # $dest should be copied to `file:///android_asset/webview`.
            #
            # Gradle -- more precisely, the Android Gradle plugin -- is already
            # configured to copy some directory from `build/` into the APK. We
            # determine which directory that is in Gradle, and pass it here.
            if [[ "$dest" != "$root/android/app/build/"* ]]; then
                err "unexpected destination directory '$dest' (expected target in $root/android/app/build/)"
            fi
        ;;
        *) err "impossible target $target";;
    esac

    # As implied above, the ultimate destination of these files should be a
    # directory named `./webview` (relative to the platform-dependent asset
    # root directory).
    #
    # The target directory basename should therefore be 'webview': both build
    # systems will preserve the name they're given here.
    if [[ "$dest" != *"/webview" ]]; then
        err "unexpected destination directory '$dest' (expected basename \"webview\")"
    fi
fi  # if $sanity_checks


################################################################################
# (Build and) sync
################################################################################

# Sync files from src to dest, reading rsync filter rules from stdin.
#
# Both src and dest should be directories.
#
# Files in dest not mentioned will be deleted by default.  A rule
# like `-,r /foo` will override this to leave `foo` in place.
#
# For documentation on rsync filter rules, see `man rsync` or:
#   https://dyn.manpages.debian.org/testing/rsync/rsync.1.en.html#FILTER_RULES
sync() {
    local src="$1" dest="$2"
    mkdir -p "${dest}"
    rsync -aR --no-D --delete --delete-excluded \
          "${src}/./" "${dest}/." \
          --filter='. /dev/stdin'
}

# Copy over files from KaTeX.
katex_font_type=woff2  # Supported since Safari 10 and Chrome 36.
sync "${root}/node_modules/katex/dist" "${dest}/katex" <<EOF
+ katex.css
+ katex.js
+ *.${katex_font_type}
+ fonts/
- *
EOF

# Copy over our own files.
sync "${root}/src/webview/static" "${dest}" <<EOF
# Leave alone the katex directory we just made.
-,r /katex

# Ignore files that won't be needed at runtime.
- README.md

+ *
EOF
